<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="proc_8c" kind="file" language="C++">
    <compoundname>proc.c</compoundname>
    <includes refid="proc_8h" local="yes">proc.h</includes>
    <incdepgraph>
      <node id="157">
        <label>src/proc.c</label>
        <link refid="proc_8c"/>
        <childnode refid="158" relation="include">
        </childnode>
      </node>
      <node id="161">
        <label>linux/seq_file.h</label>
      </node>
      <node id="158">
        <label>proc.h</label>
        <link refid="proc_8h"/>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
      </node>
      <node id="160">
        <label>linux/proc_fs.h</label>
      </node>
      <node id="159">
        <label>common.h</label>
        <link refid="common_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="proc_8c_1a1746fe4dcd5c6032906dd8bcae67e363" prot="public" static="yes" mutable="no">
        <type>struct seq_operations</type>
        <definition>struct seq_operations fiber_proc_ops</definition>
        <argsstring></argsstring>
        <name>fiber_proc_ops</name>
        <initializer>= {
    .start = fiber_proc_start,
    .next = fiber_proc_next,
    .stop = fiber_proc_stop,
    .show = fiber_proc_show
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proc.c" line="18" column="1" bodyfile="src/proc.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="proc_8c_1ab0e6e321924d312d4039b36ce3ffa46a" prot="public" static="yes" mutable="no">
        <type>struct file_operations</type>
        <definition>struct file_operations fiber_proc_file_ops</definition>
        <argsstring></argsstring>
        <name>fiber_proc_file_ops</name>
        <initializer>= {
    .owner = THIS_MODULE,
    .open = fiber_proc_open,
    .read = seq_read,
    .llseek = seq_lseek,
    .release = seq_release
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proc.c" line="18" column="1" bodyfile="src/proc.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="proc_8c_1a6de64fea59ad61157f7fabb04be185fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int fiber_proc_open</definition>
        <argsstring>(struct inode *inode, struct file *file)</argsstring>
        <name>fiber_proc_open</name>
        <param>
          <type>struct inode *</type>
          <declname>inode</declname>
        </param>
        <param>
          <type>struct file *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Implement here the method that register the operations of the file. In this case we implement the proc file as it was a char device, so we have to define all the operations that the fs should do. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proc.c" line="14" column="1" bodyfile="src/proc.c" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="proc_8c_1a8925160c81efcffa90f6c46da1074766" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * fiber_proc_start</definition>
        <argsstring>(struct seq_file *sfile, loff_t *pos)</argsstring>
        <name>fiber_proc_start</name>
        <param>
          <type>struct seq_file *</type>
          <declname>sfile</declname>
        </param>
        <param>
          <type>loff_t *</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Start of the iterator, we may want here to acquire semaphores/spinlocks. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sfile</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proc.c" line="15" column="1" bodyfile="src/proc.c" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="proc_8c_1ac5c24d99228c0f7cbeb5800a19377dcc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * fiber_proc_next</definition>
        <argsstring>(struct seq_file *s, void *v, loff_t *pos)</argsstring>
        <name>fiber_proc_next</name>
        <param>
          <type>struct seq_file *</type>
          <declname>sfile</declname>
          <defname>s</defname>
        </param>
        <param>
          <type>void *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>loff_t *</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Get the next element in the iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sfile</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proc.c" line="16" column="1" bodyfile="src/proc.c" bodystart="104" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="proc_8c_1a4f954bbc6621a3e0fe836527a4c004e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fiber_proc_stop</definition>
        <argsstring>(struct seq_file *sfile, void *v)</argsstring>
        <name>fiber_proc_stop</name>
        <param>
          <type>struct seq_file *</type>
          <declname>sfile</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Clean after iterator ending. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sfile</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proc.c" line="17" column="1" bodyfile="src/proc.c" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="proc_8c_1a93d3e8d650256d1535da52f8bca2b957" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int fiber_proc_show</definition>
        <argsstring>(struct seq_file *sfile, void *v)</argsstring>
        <name>fiber_proc_show</name>
        <param>
          <type>struct seq_file *</type>
          <declname>sfile</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Show the true data at iteartor position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sfile</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proc.c" line="18" column="1" bodyfile="src/proc.c" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="proc_8c_1ac1cb67a3c8f09a371d771862ebc2f578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_proc</definition>
        <argsstring>()</argsstring>
        <name>init_proc</name>
        <briefdescription>
<para>Init here all the proc files for the module Inspired by <ulink url="https://static.lwn.net/images/pdf/LDD3/ch04.pdf">https://static.lwn.net/images/pdf/LDD3/ch04.pdf</ulink> and updated to new standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proc.c" line="46" column="1" bodyfile="src/proc.c" bodystart="46" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="proc_8c_1adc42369799f038365080b4111bbd6b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_proc</definition>
        <argsstring>()</argsstring>
        <name>destroy_proc</name>
        <briefdescription>
<para>Destroy all the proc files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proc.c" line="61" column="1" bodyfile="src/proc.c" bodystart="61" bodyend="64"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file contains the implementation of the /proc fs files. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Gabriele Proietti Mattia <ulink url="mailto:gabry.gabry@hotmail.it">gabry.gabry@hotmail.it</ulink> </para></simplesect>
<simplesect kind="author"><para>Alexandru Daniel Tufa <ulink url="mailto:alex.tufa94@gmail.com">alex.tufa94@gmail.com</ulink> </para></simplesect>
<simplesect kind="date"><para>2018-05-06 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="proc_8h" kindref="compound">proc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Static<sp/>declarations</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fiber_proc_open(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>inode<sp/>*inode,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>file<sp/>*file);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fiber_proc_start(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>seq_file<sp/>*sfile,<sp/>loff_t<sp/>*pos);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fiber_proc_next(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>seq_file<sp/>*sfile,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v,<sp/>loff_t<sp/>*pos);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fiber_proc_stop(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>seq_file<sp/>*sfile,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fiber_proc_show(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>seq_file<sp/>*sfile,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">seq_operations<sp/>fiber_proc_ops<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>.start<sp/>=<sp/>fiber_proc_start,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>.next<sp/>=<sp/>fiber_proc_next,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>.stop<sp/>=<sp/>fiber_proc_stop,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>.show<sp/>=<sp/>fiber_proc_show</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">file_operations<sp/>fiber_proc_file_ops<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>.owner<sp/>=<sp/>THIS_MODULE,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>.open<sp/>=<sp/>fiber_proc_open,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>.read<sp/>=<sp/>seq_read,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>.llseek<sp/>=<sp/>seq_lseek,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>.release<sp/>=<sp/>seq_release</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>Implementations</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="proc_8c_1ac1cb67a3c8f09a371d771862ebc2f578" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="proc_8c_1ac1cb67a3c8f09a371d771862ebc2f578" kindref="member">init_proc</ref>()<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">proc_dir_entry<sp/>*entry;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>proc_create(PROC_ENTRY,<sp/>0,<sp/>NULL,<sp/>&amp;fiber_proc_file_ops);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entry)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printk(KERN_ALERT<sp/>MODULE_NAME<sp/>PROC_LOG<sp/></highlight><highlight class="stringliteral">&quot;registering<sp/>/proc/&quot;</highlight><highlight class="normal"><sp/>PROC_ENTRY<sp/></highlight><highlight class="stringliteral">&quot;<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>printk(KERN_DEBUG<sp/>MODULE_NAME<sp/>PROC_LOG<sp/></highlight><highlight class="stringliteral">&quot;registering<sp/>/proc/&quot;</highlight><highlight class="normal"><sp/>PROC_ENTRY<sp/></highlight><highlight class="stringliteral">&quot;<sp/>success&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="proc_8c_1adc42369799f038365080b4111bbd6b52" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="proc_8c_1adc42369799f038365080b4111bbd6b52" kindref="member">destroy_proc</ref>()<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_proc_entry(PROC_ENTRY,<sp/>NULL);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>printk(KERN_DEBUG<sp/>MODULE_NAME<sp/>PROC_LOG<sp/></highlight><highlight class="stringliteral">&quot;/proc/&quot;</highlight><highlight class="normal"><sp/>PROC_ENTRY<sp/></highlight><highlight class="stringliteral">&quot;<sp/>destroyed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>Implementation<sp/>of<sp/>static<sp/>functions</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fiber_proc_open(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>inode<sp/>*inode,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>file<sp/>*file)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seq_open(file,<sp/>&amp;fiber_proc_ops);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fiber_proc_start(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>seq_file<sp/>*sfile,<sp/>loff_t<sp/>*pos)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let`s<sp/>say<sp/>we<sp/>have<sp/>only<sp/>a<sp/>single<sp/>item<sp/>to<sp/>show</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pos<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fiber_proc_next(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>seq_file<sp/>*s,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v,<sp/>loff_t<sp/>*pos)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>loff_t<sp/>*spos<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>*pos<sp/>=<sp/>++*spos;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pos<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spos;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fiber_proc_stop(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>seq_file<sp/>*sfile,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v)<sp/>{}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fiber_proc_show(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>seq_file<sp/>*sfile,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>seq_printf(sfile,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>proc<sp/>file<sp/>is<sp/>working<sp/>very<sp/>well!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/proc.c"/>
  </compounddef>
</doxygen>
